package compiler;

import ast.Node;

/*
 Espresso Compiler - https://github.com/neevsamar/espresso.git
 
 Alireza Samar (A147053)
 Sepideh Sattar (A138894)
 */

public class ScopeSymbol extends Symbol
{
    //symbol table to contain symbols inside the scope
    private SymbolTable sTable;

    //private constructor, name is a unique name for the scope generated by getInstance
    //st is a SymbolTable for the scope
    private ScopeSymbol(String name, SymbolTable st, Node decl)
    {
        super(name, "void", decl);
        sTable = st;
        sTable.setParentEntry(this);
    }

    //used by getInstance to create a unique name for each scope
    private static int nextScope = 0;

    /**
     * create a new instance of ScopeEntry
     * @param st a SymbolTable that contains symbols in the new scope
     * @param decl the node where the scope is stored
     * @return a new, and unique, ScopeEntry object
     */
    public static ScopeSymbol getInstance(SymbolTable st, Node decl)
    {
        return new ScopeSymbol("scope" + (++nextScope), st, decl);
    }

    public String getKind()
    {
        return "scope";
    }

    public SymbolTable getSymbolTable()
    {
        return sTable;
    }
}